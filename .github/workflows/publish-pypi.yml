name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi_only:
        description: 'Publish to TestPyPI only (skip production)'
        type: boolean
        required: true
        default: true
      dry_run:
        description: 'Dry run (build but do not publish)'
        type: boolean
        required: false
        default: false

env:
  # Cost control for real API testing
  GOOGLE_MODEL: "gemini-1.5-flash"
  MONTHLY_BUDGET_USD: "2.0"
  MAX_REQUESTS_PER_RUN: "10"

jobs:
  build-and-test:
    name: Build Package and Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for setuptools-scm
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-publish-${{ hashFiles('**/requirements.txt', 'setup.py', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-publish-
          ${{ runner.os }}-pip-
          
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools-scm
        
    - name: Build package
      run: |
        python -m build
        ls -la dist/
        
    - name: Check package with twine
      run: twine check dist/*
      
    - name: Display package info
      run: |
        python -m pip install pkginfo
        python -c "
        import pkginfo
        import glob
        wheel_files = glob.glob('dist/*.whl')
        if wheel_files:
            info = pkginfo.get_metadata(wheel_files[0])
            print(f'Package: {info.name}')
            print(f'Version: {info.version}')
            print(f'Summary: {info.summary}')
        "
        
    - name: Test package installation
      run: |
        pip install dist/*.whl
        
    - name: Test CLI functionality
      run: |
        deflect-bot --version
        deflect-bot config --show
        deflect-bot status
        
    - name: Test with real API (if available)
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        if [ ! -z "$GOOGLE_API_KEY" ]; then
          echo "Testing with real Gemini API..."
          deflect-bot ping || echo "API test failed - might be rate limited or unavailable"
        else
          echo "No API key provided, skipping real API test"
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 30

  publish-to-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 10
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && !inputs.dry_run)
    environment:
      name: testpypi
      url: https://test.pypi.org/p/support-deflect-bot
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
        
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        print-hash: true
        
    - name: Wait for TestPyPI availability
      run: |
        echo "Waiting 60 seconds for TestPyPI to make package available..."
        sleep 60

  test-testpypi-installation:
    name: Test TestPyPI Installation
    runs-on: ubuntu-latest
    needs: publish-to-testpypi
    timeout-minutes: 15
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && !inputs.dry_run)
    
    strategy:
      matrix:
        python-version: ['3.9', '3.11', '3.12']
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install from TestPyPI
      run: |
        pip install --upgrade pip
        # Install from TestPyPI with fallback to regular PyPI for dependencies
        pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ support-deflect-bot
        
    - name: Test installation
      run: |
        deflect-bot --version
        deflect-bot config --show
        
    - name: Test CLI commands
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        # Test core functionality
        deflect-bot status
        
        # Test API integration if key is available
        if [ ! -z "$GOOGLE_API_KEY" ]; then
          deflect-bot ping || echo "API ping failed - might be rate limited"
        fi

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-and-test, test-testpypi-installation]
    timeout-minutes: 10
    if: |
      github.event_name == 'release' && 
      github.event.release.prerelease == false &&
      (github.event_name != 'workflow_dispatch' || !inputs.test_pypi_only)
    environment:
      name: pypi
      url: https://pypi.org/p/support-deflect-bot
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        print-hash: true
        
    - name: Create release summary
      run: |
        echo "✅ Successfully published to PyPI!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📦 Package: support-deflect-bot" >> $GITHUB_STEP_SUMMARY
        echo "🏷️ Version: ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
        echo "🔗 PyPI: https://pypi.org/project/support-deflect-bot/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Installation command:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "pip install support-deflect-bot" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  test-production-installation:
    name: Test Production Installation
    runs-on: ubuntu-latest
    needs: publish-to-pypi
    timeout-minutes: 10
    if: github.event_name == 'release' && github.event.release.prerelease == false
    
    steps:
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Wait for PyPI availability
      run: |
        echo "Waiting 120 seconds for PyPI to make package available..."
        sleep 120
        
    - name: Install from PyPI
      run: |
        pip install --upgrade pip
        pip install support-deflect-bot
        
    - name: Test production installation
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        deflect-bot --version
        deflect-bot config --show
        deflect-bot status
        
        # Test real functionality
        if [ ! -z "$GOOGLE_API_KEY" ]; then
          deflect-bot ping || echo "Production API test failed - might be rate limited"
        fi
        
    - name: Verify installation completeness
      run: |
        python -c "
        import support_deflect_bot
        print(f'Package imported successfully')
        print(f'Package location: {support_deflect_bot.__file__}')
        "

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [publish-to-pypi, test-production-installation]
    if: always() && (needs.publish-to-pypi.result == 'success' || needs.test-testpypi-installation.result == 'success')
    
    steps:
    - name: Create success notification
      run: |
        if [ "${{ needs.publish-to-pypi.result }}" == "success" ]; then
          echo "🎉 Package successfully published to PyPI!" >> $GITHUB_STEP_SUMMARY
          echo "📦 Install with: pip install support-deflect-bot" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.test-testpypi-installation.result }}" == "success" ]; then
          echo "🧪 Package successfully tested on TestPyPI!" >> $GITHUB_STEP_SUMMARY
          echo "📦 Test install with: pip install -i https://test.pypi.org/simple/ support-deflect-bot" >> $GITHUB_STEP_SUMMARY
        fi