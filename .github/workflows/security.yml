name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly Monday 2AM UTC
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'setup.py'
      - 'requirements.txt'
      - 'pyproject.toml'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements.txt', 'setup.py', 'pyproject.toml') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run Bandit security scan
      id: bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json -ll || echo "bandit_exit_code=$?" >> $GITHUB_OUTPUT
        bandit -r src/ -f txt -ll
      continue-on-error: true
      
    - name: Run Safety vulnerability scan
      id: safety
      run: |
        safety check --json --output safety-report.json || echo "safety_exit_code=$?" >> $GITHUB_OUTPUT
        safety check --short-report
      continue-on-error: true
      
    - name: Run pip-audit
      id: pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || echo "pip_audit_exit_code=$?" >> $GITHUB_OUTPUT
        pip-audit --format=table
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
        retention-days: 90
        
    - name: Parse and comment on security issues
      if: github.event_name == 'pull_request'
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "bandit-report.json" ]; then
          BANDIT_ISSUES=$(python -c "
          import json
          try:
              with open('bandit-report.json') as f:
                  data = json.load(f)
                  print(len(data.get('results', [])))
          except:
              print(0)
          ")
          echo "🔍 Bandit found $BANDIT_ISSUES potential security issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "safety-report.json" ]; then
          echo "🛡️ Safety vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "pip-audit-report.json" ]; then
          echo "📦 Pip-audit dependency scan completed" >> $GITHUB_STEP_SUMMARY
        fi

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      actions: read
      contents: read
      security-events: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        queries: security-and-quality
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies for analysis
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:python"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, BSD-3-Clause, BSD-2-Clause, Apache-2.0, ISC, MPL-2.0

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install cyclonedx-bom
      run: |
        pip install cyclonedx-bom
        
    - name: Generate SBOM
      run: |
        cyclonedx-py -o sbom.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ github.run_number }}
        path: sbom.json
        retention-days: 90

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-audit, codeql-analysis, secret-scan, supply-chain-security]
    if: always()
    
    steps:
    - name: Create security summary
      run: |
        echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Security Audit | ${{ needs.security-audit.result }} | Bandit, Safety, pip-audit |" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} | Static code analysis |" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Scanning | ${{ needs.secret-scan.result }} | TruffleHog scan |" >> $GITHUB_STEP_SUMMARY
        echo "| Supply Chain | ${{ needs.supply-chain-security.result }} | SBOM generation |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check for any failures
        if [[ "${{ needs.security-audit.result }}" == "failure" || 
              "${{ needs.codeql-analysis.result }}" == "failure" || 
              "${{ needs.secret-scan.result }}" == "failure" ]]; then
          echo "⚠️ **Some security checks failed. Please review the results.**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Consider:" >> $GITHUB_STEP_SUMMARY
          echo "- Review security scan reports in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Address high-severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Update dependencies with known vulnerabilities" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **All security checks passed successfully!**" >> $GITHUB_STEP_SUMMARY
        fi