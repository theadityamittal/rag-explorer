name: CI Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly Monday 6AM UTC

env:
  # Application settings for CI
  APP_NAME: "Support Deflect Bot CI"
  CHROMA_DB_PATH: "./ci_chroma_db"
  ANSWER_MIN_CONF: "0.20"
  MAX_CHUNKS: "5"
  MAX_CHARS_PER_CHUNK: "800"
  
  # Cost control settings
  MONTHLY_BUDGET_USD: "2.0"
  COST_ALERT_THRESHOLD: "0.8"
  ENABLE_COST_TRACKING: "true"
  MAX_REQUESTS_PER_CI: "50"
  
  # Default to Gemini for real API testing
  DEFAULT_PROVIDER_STRATEGY: "cost_optimized"
  GOOGLE_MODEL: "gemini-1.5-flash"
  DEFAULT_LLM_MODEL: "gemini-1.5-flash"
  DEFAULT_EMBEDDING_MODEL: "text-embedding-004"

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for setuptools-scm
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements.txt', 'setup.py', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Check code formatting with black
      run: black --check --diff src tests
      
    - name: Check import sorting with isort
      run: isort --check-only --diff src tests
      
    - name: Lint with flake8
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Type check with mypy
      run: mypy src --ignore-missing-imports
      continue-on-error: true  # Gradually enable strict typing

  package-build:
    name: Package Build & CLI Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for setuptools-scm
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-build-${{ hashFiles('**/requirements.txt', 'setup.py', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-build-
          ${{ runner.os }}-pip-
          
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools-scm
        
    - name: Build package
      run: python -m build
      
    - name: Check package with twine
      run: twine check dist/*
      
    - name: Test package installation
      run: |
        pip install dist/*.whl
        deflect-bot --version
        deflect-bot config --show
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-artifacts
        path: dist/
        retention-days: 7

  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, macos-latest, windows-latest]
        exclude:
          # Reduce matrix size for PRs and non-main branches
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest  
            python-version: '3.10'
          - os: windows-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.10'
        include:
          # Always test all Python versions on Ubuntu
          - os: ubuntu-latest
            python-version: '3.9'
          - os: ubuntu-latest
            python-version: '3.10'
          - os: ubuntu-latest
            python-version: '3.11'
          - os: ubuntu-latest
            python-version: '3.12'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-unit-${{ hashFiles('**/requirements.txt', 'setup.py', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-unit-
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v -m "unit" --cov=src --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests with Real Gemini
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # Only run integration tests on main branch pushes to control API costs
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-integration-${{ hashFiles('**/requirements.txt', 'setup.py', 'pyproject.toml') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,api]"
        
    - name: Run integration tests with real Gemini API
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        pytest tests/integration/ -v -m "integration" --tb=short --maxfail=5
      continue-on-error: true  # Don't fail the build if API is temporarily unavailable

  provider-tests:
    name: Multi-Provider Ecosystem Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-providers-${{ hashFiles('**/requirements.txt', 'setup.py', 'pyproject.toml') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,api,local]"
        
    - name: Run provider ecosystem tests
      env:
        # Only provide Gemini API key for real testing
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        # Mock all other providers
        OPENAI_API_KEY: "mock-openai-key-for-testing"
        GROQ_API_KEY: "mock-groq-key-for-testing"
        ANTHROPIC_API_KEY: "mock-claude-key-for-testing"
        MISTRAL_API_KEY: "mock-mistral-key-for-testing"
      run: |
        pytest tests/providers/ -v --tb=short --maxfail=10
      continue-on-error: true

  system-tests:
    name: System Tests (E2E)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-system-${{ hashFiles('**/requirements.txt', 'setup.py', 'pyproject.toml') }}
        
    - name: Cache ChromaDB
      uses: actions/cache@v3
      with:
        path: ./ci_chroma_db
        key: ${{ runner.os }}-chroma-${{ hashFiles('tests/**/*.py') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,api]"
        
    - name: Create test documentation
      run: |
        mkdir -p docs
        echo "# Test Documentation" > docs/test.md
        echo "This is a test document for system testing." >> docs/test.md
        
    - name: Run system tests
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        pytest tests/system/ -v --tb=short
      continue-on-error: true

  pypi-installation-test:
    name: PyPI Installation Test
    runs-on: ubuntu-latest
    needs: package-build
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-artifacts
        path: dist/
        
    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        
    - name: Test CLI functionality
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        deflect-bot --version
        deflect-bot config --show
        deflect-bot status
        # Test ping only if API key is available
        if [ ! -z "$GOOGLE_API_KEY" ]; then
          deflect-bot ping || echo "Ping failed - API might be unavailable"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit
        pip install -e .
        
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt
        
    - name: Run Safety vulnerability scan
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
        retention-days: 30

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [code-quality, package-build, unit-tests, integration-tests, provider-tests, system-tests, pypi-installation-test, security-scan]
    
    steps:
    - name: Check job results
      run: |
        echo "Job Results Summary:"
        echo "==================="
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Package Build: ${{ needs.package-build.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Provider Tests: ${{ needs.provider-tests.result }}"
        echo "System Tests: ${{ needs.system-tests.result }}"
        echo "PyPI Installation Test: ${{ needs.pypi-installation-test.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        
        # Fail if critical jobs failed
        if [[ "${{ needs.code-quality.result }}" == "failure" ]]; then
          echo "❌ Critical failure: Code quality checks failed"
          exit 1
        fi
        
        if [[ "${{ needs.package-build.result }}" == "failure" ]]; then
          echo "❌ Critical failure: Package build failed"
          exit 1
        fi
        
        if [[ "${{ needs.unit-tests.result }}" == "failure" ]]; then
          echo "❌ Critical failure: Unit tests failed"
          exit 1
        fi
        
        echo "✅ CI pipeline completed successfully"