name: Publish to PyPI

on:
  workflow_run:
    workflows: ["Release Management"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name to publish (e.g., v0.1.1)'
        required: true
        type: string
      test_pypi:
        description: 'Publish to Test PyPI instead of production'
        required: false
        type: boolean
        default: false
      force_publish:
        description: 'Force publish even if version exists'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'

jobs:
  check-release:
    name: Check Release Status
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    outputs:
      should_publish: ${{ steps.check.outputs.should_publish }}
      tag_name: ${{ steps.check.outputs.tag_name }}
      version: ${{ steps.check.outputs.version }}
      is_prerelease: ${{ steps.check.outputs.is_prerelease }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check release status
      id: check
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          TAG_NAME="${{ inputs.tag_name }}"
          echo "Manual publish triggered for $TAG_NAME"
          echo "should_publish=true" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=${TAG_NAME#v}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${{ inputs.test_pypi }}" >> $GITHUB_OUTPUT
        else
          # Check if the release workflow was successful
          if [ "${{ github.event.workflow_run.conclusion }}" == "success" ]; then
            # Get the latest tag
            TAG_NAME=$(git describe --tags --abbrev=0)
            echo "Automatic publish triggered for $TAG_NAME"
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "version=${TAG_NAME#v}" >> $GITHUB_OUTPUT
            
            # Check if it's a prerelease
            if [[ "$TAG_NAME" =~ -[a-zA-Z] ]]; then
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Release workflow failed, skipping publish"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi
        fi

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should_publish == 'true'
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ needs.check-release.outputs.tag_name }}
        
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-build-${{ hashFiles('**/pyproject.toml') }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools-scm wheel
        
    - name: Build package
      run: |
        python -m build --sdist --wheel --outdir dist/
        ls -la dist/
        
    - name: Verify build
      run: |
        # Check that we have both sdist and wheel
        if [ ! -f dist/*.tar.gz ]; then
          echo "❌ Missing source distribution"
          exit 1
        fi
        
        if [ ! -f dist/*.whl ]; then
          echo "❌ Missing wheel distribution"
          exit 1
        fi
        
        echo "✅ Both sdist and wheel created successfully"
        
    - name: Check package with twine
      run: |
        twine check dist/*
        
    - name: Verify version consistency
      run: |
        EXPECTED_VERSION="${{ needs.check-release.outputs.version }}"
        
        # Extract version from wheel
        WHEEL_FILE=$(ls dist/*.whl)
        WHEEL_VERSION=$(python -c "import re; print(re.search(r'-([0-9][^-]*)-', '$WHEEL_FILE').group(1))")
        
        echo "Expected version: $EXPECTED_VERSION"
        echo "Wheel version: $WHEEL_VERSION"
        
        if [ "$WHEEL_VERSION" != "$EXPECTED_VERSION" ]; then
          echo "❌ Version mismatch!"
          exit 1
        fi
        
        echo "✅ Version consistency verified"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 3

  test-package:
    name: Test Package Installation
    runs-on: ${{ matrix.os }}
    needs: build-package
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.11', '3.12']
        exclude:
          # Reduce matrix for faster testing
          - os: macos-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.9'
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        
    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        
    - name: Test CLI functionality
      run: |
        deflect-bot --version
        deflect-bot config --show
        deflect-bot status
        
    - name: Verify package imports
      run: |
        python -c "
        import support_deflect_bot
        from support_deflect_bot.cli.main import cli
        from support_deflect_bot.utils.settings import APP_VERSION
        print(f'✅ Package imported successfully, version: {APP_VERSION}')
        "

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [check-release, build-package, test-package]
    if: needs.check-release.outputs.is_prerelease == 'true' || inputs.test_pypi == true
    timeout-minutes: 10
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/support-deflect-bot
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        
    - name: Check if version exists on Test PyPI
      id: check_version
      run: |
        VERSION="${{ needs.check-release.outputs.version }}"
        
        # Check if version already exists
        if pip index versions --index-url https://test.pypi.org/simple/ support-deflect-bot 2>/dev/null | grep -q "$VERSION"; then
          echo "Version $VERSION already exists on Test PyPI"
          if [ "${{ inputs.force_publish }}" == "true" ]; then
            echo "Force publish enabled, will skip version check"
            echo "should_skip=false" >> $GITHUB_OUTPUT
          else
            echo "should_skip=true" >> $GITHUB_OUTPUT
          fi
        else
          echo "Version $VERSION not found on Test PyPI, proceeding with upload"
          echo "should_skip=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Publish to Test PyPI
      if: steps.check_version.outputs.should_skip == 'false'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        verbose: true
        
    - name: Verify Test PyPI upload
      if: steps.check_version.outputs.should_skip == 'false'
      run: |
        sleep 60  # Wait for package to be available
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ support-deflect-bot==${{ needs.check-release.outputs.version }}
        deflect-bot --version
        echo "✅ Successfully installed from Test PyPI"

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [check-release, build-package, test-package]
    if: needs.check-release.outputs.is_prerelease == 'false' && inputs.test_pypi != true
    timeout-minutes: 10
    environment:
      name: pypi
      url: https://pypi.org/p/support-deflect-bot
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        
    - name: Check if version exists on PyPI
      id: check_version
      run: |
        VERSION="${{ needs.check-release.outputs.version }}"
        
        # Check if version already exists
        if pip index versions support-deflect-bot 2>/dev/null | grep -q "$VERSION"; then
          echo "❌ Version $VERSION already exists on PyPI"
          if [ "${{ inputs.force_publish }}" == "true" ]; then
            echo "⚠️ Force publish enabled, but PyPI doesn't allow overwriting"
            echo "should_skip=true" >> $GITHUB_OUTPUT
          else
            echo "should_skip=true" >> $GITHUB_OUTPUT
          fi
        else
          echo "✅ Version $VERSION not found on PyPI, proceeding with upload"
          echo "should_skip=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Publish to PyPI
      if: steps.check_version.outputs.should_skip == 'false'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
        
    - name: Verify PyPI upload
      if: steps.check_version.outputs.should_skip == 'false'
      run: |
        sleep 120  # Wait for package to be available
        pip install support-deflect-bot==${{ needs.check-release.outputs.version }}
        deflect-bot --version
        echo "✅ Successfully installed from PyPI"

  create-github-release:
    name: Update GitHub Release
    runs-on: ubuntu-latest
    needs: [check-release, publish-pypi]
    if: always() && needs.check-release.outputs.should_publish == 'true'
    timeout-minutes: 5
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Update release with PyPI links
      if: needs.publish-pypi.result == 'success'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="${{ needs.check-release.outputs.tag_name }}"
        VERSION="${{ needs.check-release.outputs.version }}"
        
        # Get current release body
        CURRENT_BODY=$(gh release view "$TAG_NAME" --json body --jq .body)
        
        # Append PyPI installation instructions
        NEW_BODY="$CURRENT_BODY

## 📦 PyPI Release

This version is now available on PyPI:

\`\`\`bash
pip install support-deflect-bot==$VERSION
\`\`\`

🔗 **PyPI Package**: https://pypi.org/project/support-deflect-bot/$VERSION/
🔗 **Documentation**: https://github.com/theadityamittal/support-deflect-bot#readme"

        # Update the release
        gh release edit "$TAG_NAME" --notes "$NEW_BODY"
        echo "✅ Updated GitHub release with PyPI information"

  publish-summary:
    name: Publish Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [check-release, build-package, test-package, publish-test-pypi, publish-pypi, create-github-release]
    
    steps:
    - name: Create publish summary
      run: |
        echo "# 📦 Publish Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ needs.check-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** ${{ needs.check-release.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Prerelease:** ${{ needs.check-release.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Status" >> $GITHUB_STEP_SUMMARY
        echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Release Check | ${{ needs.check-release.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Package Build | ${{ needs.build-package.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Package Test | ${{ needs.test-package.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test PyPI | ${{ needs.publish-test-pypi.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Production PyPI | ${{ needs.publish-pypi.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| GitHub Release | ${{ needs.create-github-release.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine overall status
        if [[ "${{ needs.check-release.result }}" == "success" && 
              "${{ needs.build-package.result }}" == "success" && 
              "${{ needs.test-package.result }}" == "success" ]]; then
          
          if [[ "${{ needs.check-release.outputs.is_prerelease }}" == "true" ]]; then
            if [[ "${{ needs.publish-test-pypi.result }}" == "success" ]]; then
              echo "✅ **Prerelease published successfully to Test PyPI!**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🔗 **Test PyPI**: https://test.pypi.org/project/support-deflect-bot/${{ needs.check-release.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Prerelease build successful but Test PyPI publish failed**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            if [[ "${{ needs.publish-pypi.result }}" == "success" ]]; then
              echo "🎉 **Release published successfully to PyPI!**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🔗 **PyPI**: https://pypi.org/project/support-deflect-bot/${{ needs.check-release.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
              echo "📦 **Install**: \`pip install support-deflect-bot==${{ needs.check-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Release build successful but PyPI publish failed**" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        else
          echo "❌ **Publish failed due to build or test issues**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the failed steps above and resolve issues before retrying." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Automated PyPI publishing via GitHub Actions*" >> $GITHUB_STEP_SUMMARY